import pytest
from aiogram import types
from unittest.mock import patch, AsyncMock
from bot.routers.admin_router import (
    router,
)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º


# –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
@pytest.mark.asyncio
async def test_admin_start():
    message = types.Message(
        message_id=1,
        from_user=types.User(
            id=123456789, is_bot=False, first_name="Test", username="testuser"
        ),
        chat=types.Chat(id=123456789, type="private"),
        text="/admin",
    )

    # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /admin
    with patch("aiogram.Bot.send_message", new_callable=AsyncMock) as mock_send_message:
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ router.message(Command("admin")) —ç—Ç–æ –≤—ã–∑–æ–≤ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç send_message
        await router.message(message)

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        mock_send_message.assert_called_once_with(
            message.chat.id,
            "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=mock.ANY,
        )


# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
@pytest.mark.asyncio
async def test_admin_no_access():
    message = types.Message(
        message_id=1,
        from_user=types.User(
            id=987654321, is_bot=False, first_name="Test", username="testuser"
        ),
        chat=types.Chat(id=987654321, type="private"),
        text="/admin",
    )

    with patch("aiogram.Bot.send_message", new_callable=AsyncMock) as mock_send_message:
        await router.message(message)

        mock_send_message.assert_called_once_with(
            message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=mock.ANY
        )

from coolname import generate_slug
from dotenv import load_dotenv
import requests
import asyncssh
import asyncio
import urllib3
import json
import uuid
import os
import logging

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from api_processors.base_processor import BaseProcessor
from api_processors.key_models import VlessKey

from bot.routers.admin_router_sending_message import (
    send_error_report,
    send_new_server_report,
)

logger = logging.getLogger(__name__)

load_dotenv()

NAME_VPN_CONFIG = "MyNewInbound"


class VlessProcessor(BaseProcessor):
    def __init__(self, ip, password):
        self.ip = None
        self.sub_port = None
        self.port_panel = None
        self.host = None
        self.data = None
        self.ses = None
        self.con = None
        self.server_id = None

    @staticmethod
    def create_server_session_by_id(func):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID —Å–µ—Ä–≤–µ—Ä–∞.

        :param func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç.
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±–µ—Ä–Ω—É—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º.

        –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
        1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç `server_id` –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
        2. –ï—Å–ª–∏ `server_id` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `db_processor` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ ID.
        4. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (IP, –ø–æ—Ä—Ç, –¥–∞–Ω–Ω—ã–µ).
        6. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é `requests.Session`.
        7. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
        8. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        """

        def wrapper(self, *args, **kwargs):
            server_id = kwargs.get("server_id")
            if server_id is None:
                raise ValueError("!!!server_id must be passed as a keyword argument!!!")

            from initialization.db_processor_init import db_processor

            server = db_processor.get_server_by_id(server_id)
            if server is None:
                raise ValueError(f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            self.ip = server.ip
            self.sub_port = 2096
            self.port_panel = 2053
            self.host = f"https://{self.ip}:{self.port_panel}"
            self.data = {"username": "lisa_admin", "password": server.password}

            try:
                self.ses = requests.Session()
                self.ses.verify = False
                self.con = self._connect()
            except Exception as e:
                asyncio.create_task(send_error_report(e))
                self.ses = None
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

            return func(self, *args, **kwargs)

        return wrapper

    async def create_server_session(self, user_id=None):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–∏–ø–∞ "vless".

        :return: `None`

        –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
        1. –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–∏–ø–∞ "vless" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `db_processor`.
        2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (IP, –ø–æ—Ä—Ç—ã, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏).
        3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é `requests.Session`.
        4. –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é `self.ses.verify = False`.
        5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ `_connect()`.
        6. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ `self.server_id`.
        """
        from initialization.db_processor_init import db_processor

        # if self.ses is not None:
        #     return

        server = await db_processor.get_server_with_min_users("vless", user_id=user_id)

        self.ip = server.ip
        self.sub_port = 2096
        self.port_panel = 2053
        self.host = f"https://{self.ip}:{self.port_panel}"
        self.data = {"username": "lisa_admin", "password": server.password}
        self.ses = requests.Session()
        self.ses.verify = False
        self.con = self._connect()
        self.server_id = server.id

    def _connect(self) -> bool:
        """
        –õ–æ–≥–∏–Ω –≤ –ø–∞–Ω–µ–ª—å 3x-ui. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ.
        """
        try:
            resp = self.ses.post(f"{self.host}/login", data=self.data, timeout=10)
            resp.raise_for_status()
            resp_json = resp.json()
            if resp_json.get("success") is True:
                logger.debug(f"‚úÖ–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ 3x-ui {self.ip} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                msg = resp_json.get("msg", "Unknown error from /login")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {msg} –Ω–∞ {self.ip}")
                return False
        except (requests.RequestException, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏/JSON –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –∫ {self.host}: {e}")
            return False

    def _reconnect(self) -> bool:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏ –ø—Ä–æ–±—É–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
        """
        logger.info("–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (reconnect) –≤ 3x-ui...")
        if self.ses:
            self.ses.close()
        self.ses = requests.Session()
        self.ses.verify = False
        self.con = self._connect()
        return self.con

    def _check_connect(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ inbound (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ), –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ.
        """
        if not self.con:
            return False

        try:
            resource = self.ses.post(
                f"{self.host}/panel/inbound/list/", data=self.data
            ).json()
            if not resource.get("success"):
                logger.warning(
                    f'üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {resource.get("msg")}'
                )
                return False
            # –ï—Å–ª–∏ inbound'—ã –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if resource.get("obj") and len(resource["obj"]) > 0:
                logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å")
                return True

            logger.warning(f"‚ö†Ô∏è–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (inbound) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        except requests.RequestException as e:
            asyncio.create_task(send_error_report(e))
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ _check_connect: {e}")
            return False

    def _ensure_session_ok(self) -> bool:
        """
        "–†–µ—Ñ—Ä–µ—à —Å–µ—Å—Å–∏–∏": –µ—Å–ª–∏ self.con = False, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —Ç–µ–ø–µ—Ä—å –≤ –ø–æ—Ä—è–¥–∫–µ; False ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if not self.con:
            logger.info("–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ...")
            ok = self._reconnect()
            if not ok:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
                return False
        return True

    def _request_json(
        self,
        endpoint: str,
        data: dict = None,
        method: str = "post",
        max_retries: int = 2,
        **kwargs,
    ) -> dict | None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ 3x-UI (POST –∏–ª–∏ GET) —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON.
        –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É/HTML, –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.
        """
        if data is None:
            data = {}
        url = f"{self.host}{endpoint}"

        for attempt in range(max_retries):
            try:
                if method.lower() == "post":
                    resp = self.ses.post(url, data=data, timeout=10, **kwargs)
                else:
                    resp = self.ses.get(url, timeout=10, **kwargs)

                resp.raise_for_status()
                result = resp.json()
                return result

            except (requests.RequestException, json.JSONDecodeError) as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {e}"
                )
                if attempt < max_retries - 1:
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                    ok = self._reconnect()
                    if not ok:
                        logger.error("–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                        return None
                else:
                    return None

        return None

    def _add_new_connect(self) -> tuple[bool, str]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π inbound (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ).
        """
        if not self._ensure_session_ok():
            return False, "–°–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ (privateKey/publicKey)
        cert_ok, cert_obj_or_msg = self._get_new_x25519_cert()
        if not cert_ok:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å X25519-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_obj_or_msg}")
            return False, cert_obj_or_msg

        private_key = cert_obj_or_msg["privateKey"]
        public_key = cert_obj_or_msg["publicKey"]

        # –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º JSON –¥–ª—è inbound/add
        header = {"Accept": "application/json"}
        payload = {
            "up": 0,
            "down": 0,
            "total": 0,
            "remark": NAME_VPN_CONFIG,  # –ù–∞–∑–≤–∞–Ω–∏–µ inbound
            "enable": True,
            "expiryTime": 0,
            "listen": "",
            "port": 443,
            "protocol": "vless",
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": "test1",
                            "flow": "xtls-rprx-vision",
                            "email": "test1",
                            "limitIp": 0,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": True,
                            "tgId": "",
                            "subId": "yap2ddklr1imbhfq",
                        }
                    ],
                    "decryption": "none",
                    "fallbacks": [],
                }
            ),
            "streamSettings": json.dumps(
                {
                    "network": "tcp",
                    "security": "reality",
                    "realitySettings": {
                        "show": False,
                        "xver": 0,
                        "dest": "google.com:443",
                        "serverNames": ["google.com", "www.google.com"],
                        "privateKey": private_key,
                        "minClient": "",
                        "maxClient": "",
                        "maxTimediff": 0,
                        "shortIds": [
                            "03b090ff397c50b9",
                            "7ea960",
                            "765c89c0ab102d",
                            "b5b79d7c18f0",
                            "1f52d659ec",
                            "4da9671e",
                            "45a0",
                            "d3",
                        ],  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
                        "settings": {
                            "publicKey": public_key,
                            "fingerprint": "chrome",
                            "serverName": "",
                            "spiderX": "/",
                        },
                    },
                    "tcpSettings": {
                        "acceptProxyProtocol": False,
                        "header": {"type": "none"},
                    },
                }
            ),
            "sniffing": json.dumps({"enabled": False, "destOverride": []}),
        }

        # –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º inbound
        resp_json = self._request_json(
            "/panel/inbound/add", data=payload, headers=header
        )
        if not resp_json:
            return False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç /panel/inbound/add"
        if resp_json.get("success"):
            logger.debug("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ inbound!")
            return True, "OK"
        else:
            msg = resp_json.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ inbound/add")
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ inbound: {msg}")
            return False, msg

    def _get_new_x25519_cert(self) -> tuple[bool, dict]:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π (privateKey / publicKey).
        """
        if not self._ensure_session_ok():
            return False, "–°–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        resp_json = self._request_json("/server/getNewX25519Cert", data=self.data)
        if not resp_json:
            return False, "–ù–µ –ø–æ–ª—É—á–∏–ª–∏ JSON /server/getNewX25519Cert"
        if resp_json.get("success"):
            return True, resp_json["obj"]
        else:
            return False, resp_json.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

    def _get_link(self, key_id: str, key_name: str) -> str | bool:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (vless://...) –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.

        :param key_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
        :param key_name: –ò–º—è –∫–ª—é—á–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å—Å—ã–ª–∫–µ.

        :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ `False`.

        –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
        2. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è POST-–∑–∞–ø—Ä–æ—Å –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ inbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
        3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–≤–æ–º inbound —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.
        4. –ò–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞ (streamSettings), –≤–∫–ª—é—á–∞—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á.
        5. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        6. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–æ–≥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.
        """

        if not self._ensure_session_ok():
            return False

        resource = self._request_json("/panel/inbound/list/", data=self.data)
        if not resource or not resource.get("success"):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbound/list –¥–ª—è _get_link.")
            return False
        inbound_list = resource.get("obj", [])
        if not inbound_list:
            logger.error("–ù–µ—Ç inbound'–æ–≤ (–ø—É—Å—Ç–æ).")
            return False

        inbound_obj = inbound_list[0]
        stream_settings_str = inbound_obj.get("streamSettings")
        if not stream_settings_str:
            return False

        try:
            stream_settings = json.loads(stream_settings_str)
        except json.JSONDecodeError as e:
            logger.error(f"JSONDecodeError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ streamSettings: {e}")
            return False

        port = inbound_obj.get("port", 443)
        reality = stream_settings.get("realitySettings", {})
        sett = reality.get("settings", {})
        public_key = sett.get("publicKey", "")
        sni = "dl.google.com"
        flow = stream_settings.get("flow", "xtls-rprx-vision")
        short_ids = reality.get("shortIds", [])
        sid = short_ids[0] if short_ids else "deced1f3"

        return (
            f"vless://{key_id}@{self.ip}:{port}/?type=tcp&security=reality&pbk={public_key}"
            f"&fp=chrome&sni={sni}&sid={sid}&spx=%2F&flow={flow}#{key_name}"
        )

    async def create_vpn_key(
        self,
        user_id: int | None = None,
        expire_time: int = 0,
        sni: str = "dl.google.com",
        port: int = 443,
        data_limit: int = 200 * 1024**3,
    ) -> tuple[VlessKey, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π VPN-–∫–ª—é—á VLESS –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ,
        –ø–æ–º–µ—â–∞—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π inbound (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç inbound, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç).
        ...
        """
        await self.create_server_session(user_id=user_id)
        if not self._ensure_session_ok():
            return None, "–°–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        inbound_list_data = self._request_json("/panel/inbound/list/", data=self.data)
        if not inbound_list_data or not inbound_list_data.get("success"):
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbound/list, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å inbound..."
            )
            add_ok, add_msg = self._add_new_connect()
            if not add_ok:
                return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å inbound: {add_msg}"
            inbound_list_data = self._request_json(
                "/panel/inbound/list/", data=self.data
            )
            if not inbound_list_data or not inbound_list_data.get("obj"):
                return None, "Inbound list –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø—É—Å—Ç"

        inbound_list = inbound_list_data.get("obj", [])
        if not inbound_list:
            return None, "–ù–µ—Ç inbound –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
        first_inbound = inbound_list[0]
        inbound_id = first_inbound.get("id")
        if not inbound_id:
            return None, "Inbound –Ω–µ –∏–º–µ–µ—Ç ID"

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        stream_settings_str = first_inbound.get("streamSettings", "{}")
        try:
            stream_settings = json.loads(stream_settings_str)
        except json.JSONDecodeError:
            logger.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON streamSettings")
            return None, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON streamSettings"

        reality = stream_settings.get("realitySettings", {})
        sett = reality.get("settings", {})
        public_key = sett.get("publicKey", "")
        flow = stream_settings.get("flow", "xtls-rprx-vision")
        short_ids = reality.get("shortIds", [])
        sid = short_ids[0] if short_ids else "deced1f3"

        key_name = generate_slug(2).replace("-", " ")
        unique_id = str(uuid.uuid4())

        access_url = (
            f"vless://{unique_id}@{self.ip}:{port}/?type=tcp&security=reality&pbk={public_key}"
            f"&fp=chrome&sni={sni}&sid={sid}&spx=%2F&flow={flow}#{key_name}"
        )

        # 3) –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        payload = {
            "id": inbound_id,
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": unique_id,
                            "alterId": 0,
                            "email": unique_id,
                            "limitIp": 5,
                            "totalGB": data_limit,
                            "expiryTime": expire_time,
                            "enable": True,
                            "flow": flow,
                            "subId": unique_id,
                            "comment": key_name,
                        }
                    ]
                }
            ),
        }
        header = {"Accept": "application/json"}
        resource = self._request_json(
            "/panel/inbound/addClient", data=payload, headers=header
        )
        if not resource:
            return None, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ /panel/inbound/addClient"
        if resource.get("success"):
            return (
                VlessKey(
                    key_id=unique_id,
                    email=unique_id,
                    name=key_name,
                    access_url=access_url,
                    used_bytes=0,
                    data_limit=data_limit,
                ),
                self.server_id,
            )
        else:
            msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ addClient")
            return None, msg

    @create_server_session_by_id
    async def rename_key(self, key_id: str, server_id: int, new_key_name: str) -> bool:
        """
        –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π VPN-–∫–ª—é—á (VLESS) –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ,
        –º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ 'comment'. –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞ –Ω–µ —Ç—Ä–æ–≥–∞—é—Ç—Å—è.

        :param key_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ (client.id).
        :param server_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª—é—á.
        :param new_key_name: –ù–æ–≤–æ–µ –∏–º—è (comment) –¥–ª—è VPN-–∫–ª—é—á–∞.
        :return: True, –µ—Å–ª–∏ –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False.
        """

        if not self._ensure_session_ok():
            return False

        resource = self._request_json("/panel/inbound/list/", data=self.data)
        if not resource or not resource.get("success"):
            logger.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ inbound list –ø—Ä–∏ rename_key.")
            return False

        inbound_list = resource.get("obj", [])
        for inbound in inbound_list:
            inbound_id = inbound.get("id")
            settings_str = inbound.get("settings", "{}")
            try:
                inbound_settings = json.loads(settings_str)
            except json.JSONDecodeError:
                continue
            clients = inbound_settings.get("clients", [])
            for client in clients:
                if client.get("id") == key_id:
                    old_comment = client.get("comment", "")
                    client["comment"] = new_key_name
                    update_payload = {
                        "id": inbound_id,
                        "settings": json.dumps({"clients": [client]}),
                    }
                    resp = self._request_json(
                        f"/panel/inbound/updateClient/{key_id}", data=update_payload
                    )
                    if not resp:
                        logger.warning("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ updateClient (rename_key).")
                        return False
                    if resp.get("success"):
                        logger.debug(
                            f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ {key_id}: {old_comment} -> {new_key_name}"
                        )
                        return True
                    else:
                        logger.warning(f"–û—à–∏–±–∫–∞ rename_key: {resp.get('msg')}")
                        return False
        return False

    @create_server_session_by_id
    async def delete_key(self, key_id: str, server_id: int | None = None) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–ª—é—á –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ,
        –Ω–∞—Ö–æ–¥—è —Ä–µ–∞–ª—å–Ω—ã–π inbound, –≥–¥–µ –ª–µ–∂–∏—Ç –∫–ª—é—á.
        """
        if not self._ensure_session_ok():
            return False

        resource = self._request_json("/panel/inbound/list/", data=self.data)
        if not resource or not resource.get("success"):
            logger.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ inbound list –ø—Ä–∏ delete_key.")
            return False

        inbound_list = resource.get("obj", [])
        if not inbound_list:
            return False

        for inbound in inbound_list:
            inbound_id = inbound.get("id")
            settings_str = inbound.get("settings", "{}")
            try:
                inbound_settings = json.loads(settings_str)
            except json.JSONDecodeError:
                continue

            for client in inbound_settings.get("clients", []):
                if client.get("id") == key_id:
                    # –£–¥–∞–ª—è–µ–º
                    url = f"/panel/inbound/{inbound_id}/delClient/{key_id}"
                    del_resp = self._request_json(url, data=self.data)
                    if not del_resp:
                        logger.warning("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.")
                        return False
                    if del_resp.get("success"):
                        logger.debug(f"–£–¥–∞–ª–∏–ª–∏ –∫–ª—é—á {key_id}.")
                        return True
                    else:
                        msg = del_resp.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ delClient")
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id}: {msg}")
                        return False
        return False

    @create_server_session_by_id
    async def get_key_info(self, key_id: str, server_id: int = None) -> VlessKey | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN-–∫–ª—é—á–µ VLESS —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.

        :param key_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞.
        :param server_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        :return: –û–±—ä–µ–∫—Ç `VlessKey`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ, –ª–∏–±–æ None, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """

        if not self._ensure_session_ok():
            return None

        resource = self._request_json("/panel/inbound/list/", data=self.data)
        if not resource or not resource.get("success"):
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbound list –ø—Ä–∏ get_key_info.")
            return None

        inbound_list = resource.get("obj", [])
        if not inbound_list:
            logger.warning("–°–ø–∏—Å–æ–∫ inbound –ø—É—Å—Ç, –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (get_key_info).")
            return None

        used_bytes = 0
        for inbound in inbound_list:
            for stat in inbound.get("clientStats", []):
                if stat.get("email") == key_id:
                    used_bytes = stat.get("up", 0) + stat.get("down", 0)
                    break

        # clients
        for inbound in inbound_list:
            settings_str = inbound.get("settings", "{}")
            try:
                inbound_settings = json.loads(settings_str)
            except json.JSONDecodeError as ex:
                logger.error(f"JSONDecodeError inbound.settings: {ex}")
                continue

            for client in inbound_settings.get("clients", []):
                if client.get("id") == key_id:
                    name = client.get("comment", "")
                    email = client.get("email", "")
                    access_url = self._get_link(key_id, name)
                    data_limit = client.get("totalGB") or 0
                    return VlessKey(
                        key_id=key_id,
                        name=name,
                        email=email,
                        access_url=access_url,
                        used_bytes=used_bytes,
                        data_limit=data_limit,
                    )
        logger.warning(f"–ö–ª—é—á {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ inbound'–∞—Ö.")
        return None

    @create_server_session_by_id
    async def update_data_limit(
        self,
        key_id: str,
        new_limit_bytes: int,
        server_id: int = None,
        key_name: str = None,
    ) -> bool:
        """
        –ú–µ–Ω—è–µ—Ç totalGB (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ comment) —É –∫–ª–∏–µ–Ω—Ç–∞, –≥–¥–µ client.id == key_id.
        """
        if not self._ensure_session_ok():
            return False

        resource = self._request_json("/panel/inbound/list/", data=self.data)
        if not resource or not resource.get("success"):
            logger.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ inbound list –ø—Ä–∏ update_data_limit.")
            return False

        inbound_list = resource.get("obj", [])
        if not inbound_list:
            logger.warning("–ü—É—Å—Ç inbound_list –ø—Ä–∏ update_data_limit.")
            return False

        for inbound in inbound_list:
            inbound_id = inbound.get("id")
            settings_str = inbound.get("settings", "{}")
            try:
                inbound_settings = json.loads(settings_str)
            except json.JSONDecodeError:
                continue

            for client in inbound_settings.get("clients", []):
                if client.get("id") == key_id:
                    old_comment = client.get("comment", "")
                    client["totalGB"] = new_limit_bytes
                    if key_name:
                        client["comment"] = key_name

                    update_payload = {
                        "id": inbound_id,
                        "settings": json.dumps({"clients": [client]}),
                    }
                    resp = self._request_json(
                        f"/panel/inbound/updateClient/{key_id}", data=update_payload
                    )
                    if not resp:
                        logger.warning("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ updateClient (update_data_limit).")
                        return False
                    if resp.get("success"):
                        logger.debug(
                            f"–û–±–Ω–æ–≤–∏–ª–∏ –ª–∏–º–∏—Ç –∫–ª—é—á–∞ {key_id}: old='{old_comment}',"
                            f" new='{client.get('comment')}', limit={new_limit_bytes}"
                        )
                        return True
                    else:
                        msg = resp.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ update_data_limit")
                        logger.warning(f"–û—à–∏–±–∫–∞ update_data_limit {key_id}: {msg}")
                        return False
        return False

    async def setup_server(self, server):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 3X-UI –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Docker.

        :param server: –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ `ip` –∏ `password`.

        :return: `True` –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –∏–Ω–∞—á–µ `False`.

        –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
        1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ SSH.
        2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π Docker.
        3. –û—á–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Docker.
        4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é Docker –∏ Docker Compose.
        5. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ `setup.sh`.
        6. –ü–µ—Ä–µ–¥–∞–µ—Ç –≤ `setup.sh` –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        7. –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.
        """

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker-—Å–µ—Ä–≤–∏—Å–æ–≤
        stop_docker_cmds = [
            "sudo systemctl stop docker",
            "sudo systemctl stop docker.socket",
            "sudo systemctl stop containerd",
            "sudo systemctl stop containerd.socket",
            "sudo killall -9 dockerd containerd",
            "sudo apt remove --purge -y docker docker.io containerd runc",
            "sudo umount /var/run/docker/netns/default || true",
            "sudo rm -rf /var/lib/docker /etc/docker /var/run/docker*",
        ]

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ Docker (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
        remove_docker_cmds = [
            "sudo apt update",
            "sudo apt install -y ca-certificates curl gnupg lsb-release",
            "sudo install -m 0755 -d /etc/apt/keyrings",
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null",
            "sudo chmod a+r /etc/apt/keyrings/docker.asc",
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            "sudo rm -f /etc/apt/sources.list.d/docker.list",
            "apt remove --purge -y docker docker-engine docker.io containerd runc",
            "rm -rf /var/lib/docker /etc/docker /var/run/docker*",
        ]

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∏ Docker Compose
        install_docker_cmds = [
            "sudo apt update",
            "apt install -y apt-transport-https ca-certificates curl software-properties-common",
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker –¥–ª—è Ubuntu 22.04 (jammy)
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null",
            "sudo chmod a+r /etc/apt/keyrings/docker.asc",
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            "sudo rm -f /etc/apt/sources.list.d/docker.list",
            "echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu jammy stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
            "sudo apt update",
            "apt install -y docker-ce docker-ce-cli containerd.io",
            'curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose',
            "sudo chmod +x /usr/local/bin/docker-compose",
        ]
        vless_email = os.getenv("VLESS_EMAIL")
        vless_bot_token = os.getenv("VLESS_BOT_TOKEN")
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è setup.sh
        setup_script = "curl -sSL https://raw.githubusercontent.com/torikki-tou/team418/main/setup.sh -o setup.sh && chmod +x setup.sh"
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ setup.sh (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å)
        setup_answers = (
            "\n".join(
                [
                    "lisa_admin",  # –õ–æ–≥–∏–Ω
                    server.password,  # –ü–∞—Ä–æ–ª—å
                    "2053",  # –ü–æ—Ä—Ç 3X-UI
                    server.ip,  # IP/–¥–æ–º–µ–Ω
                    vless_email,  # Email
                    vless_bot_token,  # Telegram Bot Token
                    "lisa_helper",  # Telegram admin profile
                    "y",  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥–∞
                ]
            )
            + "\n"
        )
        max_attempts = 5
        for attempt in range(max_attempts):
            try:
                async with asyncssh.connect(
                    host=server.ip,
                    username="root",
                    password=server.password,
                    known_hosts=None,
                ) as conn:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
                    logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {server.ip} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

                    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ Docker
                    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π Docker...")
                    for cmd in stop_docker_cmds:
                        logger.info(f"‚û° –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                        result = await conn.run(cmd, check=False)
                        if result.exit_status != 0:
                            logger.warning(
                                f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {cmd}: {result.stderr.strip()}"
                            )

                    logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Docker (–æ—á–∏—Å—Ç–∫–∞)...")
                    for cmd in remove_docker_cmds:
                        logger.info(f"‚û° –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                        result = await conn.run(cmd, check=False)
                        if result.exit_status != 0:
                            logger.warning(
                                f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {cmd}: {result.stderr.strip()}"
                            )
                        else:
                            logger.info(result.stdout)

                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ Docker
                    logger.info("‚¨á –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∏ Docker Compose...")
                    for cmd in install_docker_cmds:
                        logger.info(f"‚û° –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                        result = await conn.run(cmd, check=False)
                        if result.exit_status != 0:
                            raise Exception(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Docker: {cmd}\n{result.stderr.strip()}"
                            )
                        logger.info(result.stdout)

                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ setup.sh
                    logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º setup.sh...")
                    result = await conn.run(setup_script)
                    if result.exit_status != 0:
                        raise Exception(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ setup.sh: {result.stderr.strip()}"
                        )
                    logger.info(result.stdout)

                    # –ó–∞–ø—É—Å–∫ setup.sh —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –æ—Ç–≤–µ—Ç–æ–≤
                    logger.info(
                        "‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º setup.sh —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö..."
                    )
                    result = await conn.run('bash -c "./setup.sh"', input=setup_answers)
                    if result.exit_status != 0:
                        raise Exception(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ 3X-UI: {result.stderr.strip()}"
                        )
                    logger.info(result.stdout)
                    await send_new_server_report(
                        server_id=server.id,
                        ip=server.ip,
                        protocol="vless",
                        management_panel_url=f"https://{server.ip}:2053",
                    )
                    logger.info(
                        f"üéâ 3X-UI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ {server.ip}:2053"
                    )
                    await asyncio.sleep(30)
                    return True

            except Exception as e:
                if attempt != 0:
                    await send_error_report(e)
                logger.info(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ 3X-UI: {e}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}"
                )
                if attempt < max_attempts - 1:
                    logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(10)

        return False

    async def get_server_info(self, server) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ:
        {
            "name": "My Server",
            "serverId": "7fda0079-5317-4e5a-bb41-5a431dddae21",
            "metricsEnabled": true,
            "createdTimestampMs": 1536613192052,
            "version": "1.0.0",
            "accessKeyDataLimit": {"bytes": 8589934592},
            "portForNewAccessKeys": 1234,
            "hostnameForAccessKeys": "example.com"
        }
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–∞–Ω–µ–ª–∏
        self.ip = server.ip
        self.port_panel = 2053
        self.host = f"https://{self.ip}:{self.port_panel}"
        self.data = {"username": "lisa_admin", "password": server.password}
        self.ses = requests.Session()
        self.ses.verify = False

        if not self._connect():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞")

        resp = self._request_json("/server/info", data=self.data)
        if not resp:
            raise Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª JSON –ø—Ä–∏ get_server_info")
        if resp.get("success"):
            return resp.get("obj", {})
        else:
            raise Exception(resp.get("msg", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"))

    @create_server_session_by_id
    async def extend_data_limit_plus_200gb(self, key_id: str, server_id=None) -> bool:
        """
        –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –∫–ª—é—á–∞ VLESS: "—Ç–µ–∫—É—â–∏–π used_bytes + 200 –ì–ë".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞.

        :param key_id: ID –∫–ª–∏–µ–Ω—Ç–∞ (UUID), –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ–ª–µ client.id
        :param server_id: ID —Å–µ—Ä–≤–µ—Ä–∞ VLESS (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç)
        """
        try:
            # 1) –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É (—Å–∫–æ–ª—å–∫–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)
            usage_info = await self.get_key_info(key_id=key_id, server_id=server_id)
            if usage_info is None:
                logger.error(f"[VLESS] –ö–ª—é—á {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}")
                return False

            used_bytes = usage_info.used_bytes

            # 2) –°–∫–ª–∞–¥—ã–≤–∞–µ–º used_bytes + 200 –ì–ë
            addition_limit = 200 * 1024**3  # 200 GB –≤ –±–∞–π—Ç–∞—Ö
            new_limit_bytes = used_bytes + addition_limit

            # 3) –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
            updated = await self.update_data_limit(
                key_id=key_id,
                new_limit_bytes=new_limit_bytes,
                server_id=server_id,
                key_name=usage_info.name,  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–º—è
            )
            if updated:
                logger.info(
                    f"[VLESS] –õ–∏–º–∏—Ç –∫–ª—é—á–∞ {key_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {new_limit_bytes} –±–∞–π—Ç "
                    f"(–∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ={used_bytes})."
                )
            else:
                logger.warning(
                    f"[VLESS] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–ª—é—á–∞ {key_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}."
                )
            return updated

        except Exception as e:
            logger.error(f"[VLESS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {e}")
            return False
